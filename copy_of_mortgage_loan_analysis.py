# -*- coding: utf-8 -*-
"""Copy of Mortgage Loan Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b4l6ZJl-7IbJ28IcNTI1seqhvsvzi_wt

Impoting the dependencies
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Data processing Part"""

# Loading dataset to pands dataframe
loan_dataset = pd.read_csv('/content/dataset.csv')

type (loan_dataset)

# printing the first five rows of the dataframe
loan_dataset.head()

loan_dataset.tail()

loan_dataset.shape

#No. of null or missing values
loan_dataset.isnull().sum()

#dropping the missing values
loan_dataset = loan_dataset.dropna()

loan_dataset.isnull().sum()

#Labelled encoding
#replacing yes with 1 or no with 0
loan_dataset.replace({'Loan_Status':{'N': 0, 'Y': 1}}, inplace = True)

#printing the first 5 columns
loan_dataset.head()

#dependencies columan values
loan_dataset['Dependents'].value_counts()

# replacing the value 3+ to 4
loan_dataset = loan_dataset.replace(to_replace='3+', value=4)

#dependent values
loan_dataset['Dependents'].value_counts()

"""data Visualization"""

# education and Loan Status
sns.countplot(x='Education', hue = "Loan_Status", data= loan_dataset)

# marital status and Loan Status
sns.countplot(x='Married', hue= "Loan_Status", data = loan_dataset)

# Gender and Loan Status
sns.countplot(x='Gender', hue = "Loan_Status", data= loan_dataset)

# convert categorical columns to numerical values
loan_dataset.replace({"Married":{"No":0, "Yes": 1},"Gender":{"Male":1, "Female":0},"Self_Employed":{"No":0, "Yes":1}, "Property_Area": {"Rural":0,"Semiurban":1,"Urban":2},"Education":{"Graduate":1,"Not Graduate":0}},inplace=True)

loan_dataset.head()

# separating the data and label
X = loan_dataset.drop(columns=["Loan_ID","Loan_Status"],axis=1)
Y = loan_dataset["Loan_Status"]

print(X)
print(Y)

"""Splitting the Data into Training Data and Test Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, stratify = Y, random_state= 2)

print(X.shape, X_train.shape, X_test.shape)

"""Training the Model:
Support Vector Machine Model
"""

classifier = svm.SVC(kernel='linear')

# training the support vector machine model
classifier.fit(X_train,Y_train)

"""Model Evaluation"""

# accuracy score on training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print("Accuracy on training data:", training_data_accuracy)

# accuracy score on test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print("Accuracy on test data:", test_data_accuracy)

"""Making a predictive system"""

input_data = (1,1,2,1,1,5417,4196,267,360,1,2)
#change input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshaping the numpy array as we are predicting for one data point or one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)
prediction = classifier.predict(input_data_reshaped)

print(prediction)

if (prediction [0]==0):
  print('The person is not eligile for loan')
else:
  print('The person is eligible for loan')

